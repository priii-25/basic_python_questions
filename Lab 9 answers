                                       Practical No 9: Classes and object
#Q1)
class Student:
 def __init__(self, name, sap_id, phy_marks, chem_marks, math_marks):
 self.name = name
 self.sap_id = sap_id
 self.phy_marks = phy_marks
 self.chem_marks = chem_marks
 self.math_marks = math_marks

 def display_details(self):
 print("Name:", self.name)
 print("SAP ID:", self.sap_id)
 print("Marks in Physics:", self.phy_marks)
 print("Marks in Chemistry:", self.chem_marks)
 print("Marks in Maths:", self.math_marks)
 print("\n")
for i in range(3):
 name = input("Enter Name: ")
 sap_id = input("Enter SAP ID: ")
 phy_marks = float(input("Enter Marks in Physics: "))
 chem_marks = float(input("Enter Marks in Chemistry: "))
 math_marks = float(input("Enter Marks in Maths: "))
 student = Student(name, sap_id, phy_marks, chem_marks, math_marks)
 student.display_details()
#Q2)
class Student:
 def __init__(self, name, sap_id, phy_marks, chem_marks, maths_marks):
 self.name = name
 self.sap_id = sap_id
 self.phy_marks = phy_marks
 self.chem_marks = chem_marks
 self.maths_marks = maths_marks

 def display(self):
 print("Name:", self.name)
 print("SAP ID:", self.sap_id)
 print("Physics Marks:", self.phy_marks)
 print("Chemistry Marks:", self.chem_marks)
 print("Maths Marks:", self.maths_marks)

 def marks_percentage(self):
 total_marks = self.phy_marks + self.chem_marks + self.maths_marks
 percentage = (total_marks / 300) * 100
 return percentage

 def result(self):
 if self.phy_marks >= 40 and self.chem_marks >= 40 and self.maths_marks >= 40:
 print("Result: Pass")
 else:
 print("Result: Fail")

def class_average(students):
 total_percentage = 0
 for student in students:
 total_percentage += student.marks_percentage()
 return total_percentage / len(students)
#Q3)
#single
class A:
 def method(self):
 print("Method of A called")
class B(A):
 pass
b = B()
b.method()
#multiple
class A:
 def method(self):
 print("Method of A called")
class B:
 def method(self):
 print("Method of B called")
class C(A, B):
 pass
c = C()
c.method()
#multi level
class A:
 def method(self):
 print("Method of A called")
class B(A):
 def method2(self):
 print("Method of B called")
class C(B):
 pass
b=B()
b.method()
c = C()
c.method2()
#hierarchical
class A:
 def method(self):
 print("Method of A called")
class B(A):
 pass
class C(A):
 pass
b=B()
b.method()
c = C()
c.method()
#Q4)
class A:
 def method(self):
 print("Method of A called")
class B(A):
 def method(self):
 print("Method of B called")
b=B()
b.method()
#Q5)
class Point:
 def __init__(self, x, y):
 self.x = x
 self.y = y
 def __add__(self, other):
 return Point(self.x + other.x, self.y + other.y)
 def __str__(self):
 return "Point(x={}, y={})".format(self.x, self.y)
p1 = Point(10, 20)
p2 = Point(12, 15)
p3 = p1 + p2
print(p3)
